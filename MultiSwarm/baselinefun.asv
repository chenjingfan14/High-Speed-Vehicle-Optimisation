function [Base] = baselinefun(flow,options,thetaBetaM,maxThetaBetaM,PrandtlMeyer)
%% Baseline configuration to be improved upon (currently X-34)

% X-34 build uses pre-defined aerofoil sections so set Bezier to false
options.Bezier = false;
% Baseline not yet created for cost function so set to false
options.Baseline = false;

% Assumed that baseline configs will input direct values and not need to be
% transformed. Thus will have to be reverse transformed to use - 
% for example body baseline variables - as standard variables (those to be 
% held cosntant)
isDirect = true;

Wing = options.Wing;
Aft = options.Aft;
Fore = options.Fore;
Nose = options.Nose;
Control = options.Control;

% Number of wing partitions
n = 2;

% No conditions required. However if variables are being input directly
% (ie. not being transformed same as initialisation variCons) then inverse
% transforms must be done here
variCons = {...
    "Variables",    "Values"};
    
wingDefs = {...
    "Dihedral",     4;
    "Chord",       [13.85, 4.387, 1.5241];
    "LESweep",     [80, 45];
    "Semispan",    [0.744+0.88, 2.62686];           
    "Section",     ["FSPLStrake", "FSPLND"];
    "xOffset",     -3.5;
    "zOffset",     -0.74};

aftDefs = {...
    "UpperLength",  0;
    "yUpperRad",    0.88;
    "yBotRatio",    0.1;
    "zUpperRad",    0.88;
    "SideLength",   0.759;
    "zLowerRad",    0.05;
    "AftLength",    11.8956};

foreDefs = {...
    "ForeLength",   4.4238};

noseDefs = {...
    "NoseRad",      0.155;
    "NoseLength",   0.1115;
    "zNoseOffset", -0.6};

controlDefs = {...
    "ControlSpan", [0.4,0.7];
    "ControlChord", 0.7};

if Wing
    variCons = [variCons; wingDefs];
end

if Aft
    variCons = [variCons; aftDefs];
end

if Fore
    variCons = [variCons; foreDefs];
end

if Nose
    variCons = [variCons; noseDefs];
end

if Control
    variCons = [variCons; controlDefs]; 
end


[foilData,~] = getaerofoilsecdata();

[cond,varArray,~] = translate(variCons);
% [partArrays,sectionArray] = partIndexing(cond,varArray);

sectionPos = baseVar(:,any(varArray == ["Section","Bezier"],2));
sections = foilData(sectionPos);

% [wingDim,aftbodyDim,forebodyDim,noseDim,controlDim] = findparts(partArrays);

[baseProperties,~,parameters] = particlecreator(baseVar,baseVar,varArray,sections,options);
% parameters.Aref = 33.213;

[~,Base.Results] = aeroprediction(baseProperties,flow,parameters,thetaBetaM,maxThetaBetaM,PrandtlMeyer,options);

% Used to save direct inputs for postprocess
if isDirect
    configInputs = baseVar;
end

% Reverse transform into ratios etc that will be used in simulation
baseVar = hardtransform(configInputs,cond,varArray);

Base.VarArray = varArray;
Base.Variables = baseVar;
Base.nVar = length(baseVar);
Base.Bezier = options.Bezier;
Base.nPartitions = n;

% Save basline so that it can be loaded into postprocess
save('Baseline')